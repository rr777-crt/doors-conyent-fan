// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
    currentRoom: 1,
    hasKey: false,
    monstersMet: 0,
    temporalActive: false,
    temporalTimer: null,
    gameActive: false,
    index: {
        temporal: { 
            name: "–í—Ä–µ–º–µ–Ω–Ω–æ–π", 
            description: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏ —Å 15% —à–∞–Ω—Å–æ–º. –£–±–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –Ω–æ –≤—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ—Ç–∫—Ä–æ–µ—Ç–µ –¥—Ä—É–≥—É—é –¥–≤–µ—Ä—å.", 
            met: false 
        },
        redCreature: { 
            name: "–ö—Ä–∞—Å–Ω–∞—è —Ç–≤–∞—Ä—å", 
            description: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10-15 —Å–µ–∫—É–Ω–¥ —Å —à–∞–Ω—Å–æ–º 10-15%. –¢—Ä–µ–±—É–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —Å–µ–∫—É–Ω–¥.", 
            met: false 
        },
        greenCreature: { 
            name: "–ó–µ–ª–µ–Ω–∞—è —Ç–≤–∞—Ä—å", 
            description: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10-15 —Å–µ–∫—É–Ω–¥ —Å —à–∞–Ω—Å–æ–º 10-15%. –ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —Å–µ–∫—É–Ω–¥.", 
            met: false 
        },
        eyePerformer: { 
            name: "–°–æ–≤–µ—Ä—à–∏—Ç–µ–ª—å –≥–ª–∞–∑", 
            description: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏ —Å 20% —à–∞–Ω—Å–æ–º (–º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞ –∑–∞ –∏–≥—Ä—É). –¢—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—è—é—â–∏—Ö—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.", 
            met: false,
            count: 0
        },
        darkness: { 
            name: "–¢—å–º–∞", 
            description: "–í —Ç—ë–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ–Ω–∞—Ä–∏–∫. –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏ —Å 35% —à–∞–Ω—Å–æ–º.", 
            met: false 
        },
        bright: { 
            name: "–Ø–†–ö–ò–ô", 
            description: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏ —Å 10% —à–∞–Ω—Å–æ–º. –û—Å–ª–µ–ø–ª—è–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥. –ù—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å 20 —Ä–∞–∑ —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å.", 
            met: false 
        }
    }
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
const roomDefinitions = {
    1: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 1",
        content: `
            <div class="room-section">
                <button class="key" onclick="takeKey()">üîë –í–∑—è—Ç—å –∫–ª—é—á</button>
            </div>
            <div class="room-section">
                <div class="door" onclick="openDoor(2)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    2: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 2",
        content: `
            <div class="room-section">
                <div class="door" onclick="openDoor(3)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    3: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 3",
        content: `
            <div class="long-room">
                <div class="room-section">
                    <p>–î–ª–∏–Ω–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä...</p>
                </div>
                <div class="room-section">
                    <div class="door" onclick="openDoor(4)">
                        –î–≤–µ—Ä—å
                        <div class="door-knob"></div>
                    </div>
                </div>
            </div>
        `
    },
    4: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 4",
        content: `
            <div class="room-section">
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–≤–µ—Ä—å</p>
            </div>
            <div class="two-doors">
                <div class="door wrong-door" onclick="showMessage('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–≤–µ—Ä—å!', 'error')">
                    –õ–æ–≤—É—à–∫–∞
                    <div class="door-knob"></div>
                </div>
                <div class="door" onclick="openDoor(5)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    5: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 5",
        content: `
            <div class="long-room">
                <div class="room-section">
                    <button class="key" onclick="takeKey()">üîë –í–∑—è—Ç—å –∫–ª—é—á</button>
                </div>
                <div class="room-section">
                    <div class="door" onclick="openDoor(6)">
                        –î–≤–µ—Ä—å
                        <div class="door-knob"></div>
                    </div>
                </div>
            </div>
        `
    },
    6: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 6",
        content: `
            <div class="room-section">
                <p>–ù–∞–π–¥–∏—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –∫–ª—é—á</p>
            </div>
            <div class="room-section">
                <div class="key hidden-object" onclick="takeKey()" style="opacity: 0.3;">üîë</div>
                <div class="door" onclick="checkDoor(7)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    7: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 7",
        content: `
            <div class="room-section">
                <p>–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¥–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è</p>
            </div>
            <div class="two-doors">
                <div class="door wrong-door" onclick="showMessage('–õ–æ–≤—É—à–∫–∞!', 'error')">
                    –î–≤–µ—Ä—å 1
                    <div class="door-knob"></div>
                </div>
                <div class="door" onclick="openDoor(8)">
                    –î–≤–µ—Ä—å 2
                    <div class="door-knob"></div>
                </div>
                <div class="door wrong-door" onclick="showMessage('–õ–æ–≤—É—à–∫–∞!', 'error')">
                    –î–≤–µ—Ä—å 3
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    8: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 8",
        content: `
            <div class="long-room" style="min-height: 700px;">
                <div class="room-section">
                    <p>–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä...</p>
                </div>
                <div class="room-section">
                    <p>–ò–¥—ë–º –¥–∞–ª—å—à–µ...</p>
                </div>
                <div class="room-section">
                    <div class="door" onclick="openDoor(9)">
                        –î–≤–µ—Ä—å
                        <div class="door-knob"></div>
                    </div>
                </div>
            </div>
        `
    },
    9: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 9",
        content: `
            <div class="room-section">
                <p>–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞</p>
            </div>
            <div class="room-section">
                <div class="door" onclick="openDoor(10)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    10: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 10",
        content: `
            <div class="room-section">
                <button class="key" onclick="takeKey()">üîë –í–∑—è—Ç—å –∫–ª—é—á</button>
            </div>
            <div class="room-section">
                <div class="door small-door" onclick="openDoor(11)">
                    –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    11: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 11",
        content: `
            <div class="room-section">
                <p>–ó–∞–∂–º–∏—Ç–µ –∫–∞–º–µ–Ω—å —á—Ç–æ–±—ã –æ—Ç–æ–¥–≤–∏–Ω—É—Ç—å</p>
            </div>
            <div class="room-section">
                <div class="stone" onmousedown="moveStone(this)" ontouchstart="moveStone(this)">
                    –ö–∞–º–µ–Ω—å
                </div>
            </div>
            <div class="room-section">
                <div class="door" onclick="openDoor(12)" style="display: none;" id="hidden-door">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    12: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 12",
        content: `
            <div class="room-section">
                <p>–ù–∞–π–¥–∏—Ç–µ 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–≤–µ—Ä–∏ –∏–∑ 10</p>
            </div>
            <div class="many-doors">
                ${Array.from({length: 10}, (_, i) => `
                    <div class="door ${i < 8 ? 'wrong-door' : ''}" onclick="${i < 8 ? 'showMessage(\"–õ–æ–≤—É—à–∫–∞!\", \"error\")' : 'openDoor(' + (13 + i - 8) + ')'}">
                        –î–≤–µ—Ä—å ${i + 1}
                        <div class="door-knob"></div>
                    </div>
                `).join('')}
            </div>
        `
    },
    13: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 13",
        content: `
            <div class="room-section">
                <button class="key" onclick="takeKey()">üîë –í–∑—è—Ç—å –∫–ª—é—á</button>
            </div>
            <div class="room-section">
                <div class="stone" onmousedown="moveStone(this)" ontouchstart="moveStone(this)">
                    –ö–∞–º–µ–Ω—å
                </div>
            </div>
            <div class="room-section">
                <div class="door" onclick="openDoor(14)" style="display: none;" id="hidden-door">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    },
    14: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 14",
        content: `
            <div class="long-room" style="min-height: 800px;">
                <div class="room-section">
                    <p>–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä —Å –∫–∞–º–Ω–µ–º...</p>
                </div>
                <div class="room-section">
                    <div class="stone" onmousedown="moveStone(this)" ontouchstart="moveStone(this)">
                        –ö–∞–º–µ–Ω—å
                    </div>
                </div>
                <div class="room-section">
                    <div class="door" onclick="openDoor(15)" style="display: none;" id="hidden-door">
                        –î–≤–µ—Ä—å
                        <div class="door-knob"></div>
                    </div>
                </div>
            </div>
        `
    },
    15: {
        title: "–ö–æ–º–Ω–∞—Ç–∞ 15",
        content: `
            <div class="room-section">
                <p>–¢—É–∞–ª–µ—Ç</p>
            </div>
            <div class="room-section">
                <div class="toilet"></div>
            </div>
            <div class="room-section">
                <div class="door" onclick="openDoor(1)">
                    –î–≤–µ—Ä—å
                    <div class="door-knob"></div>
                </div>
            </div>
        `
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', function() {
    loadGameState();
    
    // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    document.querySelector('.play-game').addEventListener('click', startGame);
    document.querySelector('.index-see').addEventListener('click', showIndex);
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('back-btn').addEventListener('click', returnToMenu);
    document.getElementById('index-back-btn').addEventListener('click', returnToMenu);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function loadGameState() {
    const savedState = localStorage.getItem('roomGameIndex');
    if (savedState) {
        const parsed = JSON.parse(savedState);
        gameState.index = { ...gameState.index, ...parsed };
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function saveGameState() {
    localStorage.setItem('roomGameIndex', JSON.stringify(gameState.index));
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
    gameState.currentRoom = 1;
    gameState.hasKey = false;
    gameState.monstersMet = 0;
    gameState.temporalActive = false;
    gameState.gameActive = true;

    document.getElementById('main-menu').style.display = 'none';
    document.getElementById('game-screen').style.display = 'block';
    document.getElementById('index-screen').style.display = 'none';
    
    loadRoom(1);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
function loadRoom(roomNumber) {
    gameState.currentRoom = roomNumber;
    
    const room = roomDefinitions[roomNumber];
    if (room) {
        document.getElementById('room-title').textContent = room.title;
        document.getElementById('room-content').innerHTML = room.content;
        updateKeyStatus();
        updateMonstersCount();
    }
}

// –í–∑—è—Ç—å –∫–ª—é—á
function takeKey() {
    gameState.hasKey = true;
    updateKeyStatus();
    showMessage('–ö–ª—é—á –ø–æ–ª—É—á–µ–Ω!', 'success');
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
function updateKeyStatus() {
    document.getElementById('key-status').textContent = gameState.hasKey ? '‚úÖ' : '‚ùå';
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤
function updateMonstersCount() {
    document.getElementById('monsters-count').textContent = gameState.monstersMet;
}

// –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å
function openDoor(nextRoom) {
    if (!gameState.gameActive) return;
    
    if (!gameState.hasKey && gameState.currentRoom !== 1) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–ª—é—á!', 'warning');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ (15% —à–∞–Ω—Å)
    if (Math.random() < 0.15 && !gameState.temporalActive) {
        spawnTemporal(nextRoom);
        gameState.index.temporal.met = true;
        saveGameState();
    } else {
        proceedToRoom(nextRoom);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–≤–µ—Ä—å (–¥–ª—è –∫–æ–º–Ω–∞—Ç –≥–¥–µ –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
function checkDoor(nextRoom) {
    if (!gameState.hasKey) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–ª—é—á!', 'warning');
        return;
    }
    openDoor(nextRoom);
}

// –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
function spawnTemporal(nextRoom) {
    gameState.temporalActive = true;
    gameState.monstersMet++;
    
    document.getElementById('temporal-warning').style.display = 'flex';
    updateMonstersCount();
    
    showMessage('–ü–æ—è–≤–∏–ª—Å—è –í–†–ï–ú–ï–ù–ù–û–ô! –û—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏—Å—å!', 'error');

    // –¢–∞–π–º–µ—Ä —Å–º–µ—Ä—Ç–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    gameState.temporalTimer = setTimeout(() => {
        if (gameState.temporalActive) {
            gameOver();
        }
    }, 5000);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    const temporalWarning = document.getElementById('temporal-warning');
    temporalWarning.onclick = () => {
        if (gameState.temporalActive) {
            clearTimeout(gameState.temporalTimer);
            gameState.temporalActive = false;
            temporalWarning.style.display = 'none';
            proceedToRoom(nextRoom);
        }
    };
}

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É
function proceedToRoom(nextRoom) {
    gameState.hasKey = false;
    updateKeyStatus();
    loadRoom(nextRoom);
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–Ω—è
function moveStone(stone) {
    stone.style.transform = 'translateX(100px)';
    stone.style.background = 'linear-gradient(135deg, #6d4c41, #5d4037)';
    stone.textContent = '–û—Ç–æ–¥–≤–∏–Ω—É—Ç';
    stone.style.cursor = 'default';
    stone.onmousedown = null;
    stone.ontouchstart = null;
    
    setTimeout(() => {
        const hiddenDoor = document.getElementById('hidden-door');
        if (hiddenDoor) {
            hiddenDoor.style.display = 'flex';
            showMessage('–ö–∞–º–µ–Ω—å –æ—Ç–æ–¥–≤–∏–Ω—É—Ç! –ü–æ—è–≤–∏–ª–∞—Å—å –¥–≤–µ—Ä—å.', 'success');
        }
    }, 1000);
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function gameOver() {
    gameState.gameActive = false;
    showMessage('–í–†–ï–ú–ï–ù–ù–û–ô –ø–æ–π–º–∞–ª –≤–∞—Å! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', 'error');
    setTimeout(() => {
        returnToMenu();
    }, 3000);
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
function returnToMenu() {
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('game-screen').style.display = 'none';
    document.getElementById('index-screen').style.display = 'none';
    
    if (gameState.temporalActive) {
        clearTimeout(gameState.temporalTimer);
        gameState.temporalActive = false;
        document.getElementById('temporal-warning').style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–µ–∫—Å
function showIndex() {
    document.getElementById('main-menu').style.display = 'none';
    document.getElementById('game-screen').style.display = 'none';
    document.getElementById('index-screen').style.display = 'block';
    
    updateIndexDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
function updateIndexDisplay() {
    const indexContainer = document.getElementById('index-container');
    indexContainer.innerHTML = '';
    
    Object.entries(gameState.index).forEach(([key, monster]) => {
        const item = document.createElement('div');
        item.className = `index-item ${monster.met ? 'unlocked' : ''}`;
        item.innerHTML = `
            <h3>${monster.name}</h3>
            <p>${monster.description}</p>
        `;
        indexContainer.appendChild(item);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type) {
    const existingMessages = document.querySelectorAll('.message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = text;
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
        messageDiv.remove();
    }, 3000);
}
